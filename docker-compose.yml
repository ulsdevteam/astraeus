version: '3'
services:
  pisces-db:
    image: postgres:14.4
    volumes:
      - piscesdbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
    restart: "always"
    environment:
      - POSTGRES_PASSWORD=${PISCES_DB_PASS}
  pisces-web:
    build: 
      context: ./pisces
      dockerfile: Dockerfile.prod
    environment:
      - APPLICATION_PORT=${PISCES_PORT}
      - DJANGO_CRON_LOCKFILE_PATH=${PISCES_DJANGO_CRON_LOCKFILE_PATH}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_PORT=${PISCES_PORT}
      - DJANGO_SECRET_KEY=${PISCES_DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${PISCES_DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${PISCES_DB_PASS}
      - SQL_HOST=${PISCES_SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - AS_BASEURL=${AS_BASEURL}
      - AS_USERNAME=${AS_USERNAME}
      - AS_PASSWORD=${AS_PASSWORD}
      - AS_REPO_ID=${AS_REPO_ID}
      - CARTOGRAPHER_USE=${CARTOGRAPHER_USE}
      - CARTOGRAPHER_BASEURL=${CARTOGRAPHER_BASEURL}
      - CARTOGRAPHER_HEALTH_CHECK_PATH=${CARTOGRAPHER_HEALTH_CHECK_PATH}
      - CHUNK_SIZE=${CHUNK_SIZE}
      - INDEX_DELETE_URL=${INDEX_DELETE_URL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - EMAIL_TO_ADDRESSES=${EMAIL_TO_ADDRESSES}
      - MOVING_IMAGE_REFS=${MOVING_IMAGE_REFS}
      - AUDIO_REFS=${AUDIO_REFS}
      - PHOTOGRAPH_REFS=${PHOTOGRAPH_REFS}
      - ASSET_BASEURL=${ASSET_BASEURL}
      - SCHEMAS_BASE_DIR=${SCHEMAS_BASE_DIR}
      - BASE_SCHEMA=${BASE_SCHEMA}
      - AGENT_SCHEMA=${AGENT_SCHEMA}
      - COLLECTION_SCHEMA=${COLLECTION_SCHEMA}
      - OBJECT_SCHEMA=${OBJECT_SCHEMA}
      - TERM_SCHEMA=${TERM_SCHEMA}
      - FINDING_AID_STATUS_RESTRICT=${FINDING_AID_STATUS_RESTRICT}
      - NOTIFY_EMAIL=${NOTIFY_EMAIL}
      - NOTIFY_TEAMS=${NOTIFY_TEAMS}
      - TEAMS_URL=${TEAMS_URL}
      - RESOURCE_ID_0_PREFIXES=${RESOURCE_ID_0_PREFIXES}
      - db=${PISCES_DB}
      - PROD=${PROD}
    volumes:
      - ./pisces:/code
    networks:
      - astraeus-interop
    ports:
      - "8007:8007"
    depends_on:
      - pisces-db
      - elasticsearch
    restart: "always"
  pisces-cron:
    environment:
      - APPLICATION_PORT=${PISCES_PORT}
      - DJANGO_CRON_LOCKFILE_PATH=${PISCES_DJANGO_CRON_LOCKFILE_PATH}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_PORT=${PISCES_PORT}
      - DJANGO_SECRET_KEY=${PISCES_DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${PISCES_DJANGO_ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${PISCES_DB_PASS}
      - SQL_HOST=${PISCES_SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - AS_BASEURL=${AS_BASEURL}
      - AS_USERNAME=${AS_USERNAME}
      - AS_PASSWORD=${AS_PASSWORD}
      - AS_REPO_ID=${AS_REPO_ID}
      - CARTOGRAPHER_USE=${CARTOGRAPHER_USE}
      - CARTOGRAPHER_BASEURL=${CARTOGRAPHER_BASEURL}
      - CARTOGRAPHER_HEALTH_CHECK_PATH=${CARTOGRAPHER_HEALTH_CHECK_PATH}
      - CHUNK_SIZE=${CHUNK_SIZE}
      - INDEX_DELETE_URL=${INDEX_DELETE_URL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - EMAIL_TO_ADDRESSES=${EMAIL_TO_ADDRESSES}
      - MOVING_IMAGE_REFS=${MOVING_IMAGE_REFS}
      - AUDIO_REFS=${AUDIO_REFS}
      - PHOTOGRAPH_REFS=${PHOTOGRAPH_REFS}
      - ASSET_BASEURL=${ASSET_BASEURL}
      - SCHEMAS_BASE_DIR=${SCHEMAS_BASE_DIR}
      - BASE_SCHEMA=${BASE_SCHEMA}
      - AGENT_SCHEMA=${AGENT_SCHEMA}
      - COLLECTION_SCHEMA=${COLLECTION_SCHEMA}
      - OBJECT_SCHEMA=${OBJECT_SCHEMA}
      - TERM_SCHEMA=${TERM_SCHEMA}
      - FINDING_AID_STATUS_RESTRICT=${FINDING_AID_STATUS_RESTRICT}
      - NOTIFY_EMAIL=${NOTIFY_EMAIL}
      - NOTIFY_TEAMS=${NOTIFY_TEAMS}
      - TEAMS_URL=${TEAMS_URL}
      - RESOURCE_ID_0_PREFIXES=${RESOURCE_ID_0_PREFIXES}
      - db=${PISCES_DB}
      - PROD=${PROD}
      - CRON=1
    build:
      context: ./pisces
      dockerfile: Dockerfile.cron
    volumes:
      - /data/logs/cron:/var/log/pisces-cron
    networks:
      - astraeus-interop
    depends_on:
      - pisces-web
    restart: "always"
  scorpio-db:
    image: postgres:14.4
    volumes:
      - scorpiodbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
    restart: "always"
    environment:
      - POSTGRES_PASSWORD=${SCORPIO_DB_PASS}
  scorpio-web:
    build: 
      context: ./scorpio
      dockerfile: Dockerfile.prod
      args:
        - SCORPIO_DNS=${SCORPIO_DNS}
        - APPLICATION_PORT=${SCORPIO_PORT:-8013}
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_CRON_LOCKFILE_PATH=${SCORPIO_DJANGO_CRON_LOCKFILE_PATH}
      - DJANGO_PORT=${SCORPIO_PORT}
      - DJANGO_SECRET_KEY=${SCORPIO_DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${SCORPIO_DJANGO_ALLOWED_HOSTS}
      - MAX_OBJECTS=${MAX_OBJECTS}
      - PISCES_BASEURL=${PISCES_BASEURL}
      - PISCES_POST_INDEX_PATH=${PISCES_POST_INDEX_PATH}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SCORPIO_DB_PASS}
      - SQL_HOST=${SCORPIO_SQL_HOST}
      - SQL_PORT=${SQL_PORT}
    volumes:
      - ./scorpio:/code
    networks:
      - astraeus-interop
    ports:
      - "${SCORPIO_PORT:-8013}:${SCORPIO_PORT:-8013}"
    depends_on:
      - scorpio-db
      - elasticsearch
    restart: "always"
  scorpio-cron:
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_CRON_LOCKFILE_PATH=${SCORPIO_DJANGO_CRON_LOCKFILE_PATH}
      - DJANGO_PORT=${SCORPIO_PORT}
      - DJANGO_SECRET_KEY=${SCORPIO_DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${SCORPIO_DJANGO_ALLOWED_HOSTS}
      - MAX_OBJECTS=${MAX_OBJECTS}
      - PISCES_BASEURL=${PISCES_BASEURL}
      - PISCES_POST_INDEX_PATH=${PISCES_POST_INDEX_PATH}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SCORPIO_DB_PASS}
      - SQL_HOST=${SCORPIO_SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - CRON=1
    build:
      context: ./scorpio
      dockerfile: Dockerfile.cron
    volumes:
      - /data/logs/cron:/var/log/scorpio-cron
    networks:
      - astraeus-interop
    depends_on:
      - scorpio-web
    restart: "always"
  argo-db:
    image: postgres:14.4
    volumes:
      - argodbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
    restart: "always"
    environment:
      - POSTGRES_PASSWORD=${ARGO_DB_PASS}
  argo-web:
    environment:
      - SQL_PASSWORD=${ARGO_DB_PASS}
      - DJANGO_PORT=${ARGO_PORT}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_SECRET_KEY=${ARGO_DJANGO_SECRET_KEY}
      - DJANGO_STATIC_URL=${ARGO_DJANGO_STATIC_URL}
      - DJANGO_ALLOWED_HOSTS=${ARGO_DJANGO_ALLOWED_HOSTS}
      - ELASTICSEARCH_CONNECTION=${ELASTICSEARCH_CONNECTION}
      - SQL_HOST=${ARGO_SQL_HOST}
      - USE_X_FORWARDED_HOST=${USE_X_FORWARDED_HOST}
      - SECURE_PROXY_SSL_HEADER=${SECURE_PROXY_SSL_HEADER}
    build: 
      context: ./argo
      dockerfile: Dockerfile.prod
    volumes:
      - ./argo:/code
    networks:
      - astraeus-interop
    ports:
      - "8001:8001"
    depends_on:
      - argo-db
      - elasticsearch
    restart: "always"
  request-broker-db:
    image: postgres:14.4
    volumes:
      - requestbrokerdbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
    environment:
      - POSTGRES_PASSWORD=${REQUEST_BROKER_DB_PASS}
  request-broker-web:
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_SECRET_KEY=${RB_DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${RB_DJANGO_ALLOWED_HOSTS}
      - DJANGO_CORS_ALLOWED_ORIGINS=${RB_DJANGO_CORS_ALLOWED_ORIGINS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${REQUEST_BROKER_DB_PASS}
      - SQL_HOST=${RB_SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - AS_BASEURL=${AS_BASEURL}
      - AS_USERNAME=${AS_USERNAME}
      - AS_PASSWORD=${AS_PASSWORD}
      - AS_REPO_ID=${AS_REPO_ID}
      - AEON_API_KEY=${RB_AEON_API_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - DEFAULT_FROM_EMAIL=${RB_DEFAULT_FROM_EMAIL}
      - DIMES_BASEURL=${RB_DIMES_BASEURL}
      - RESTRICTED_IN_CONTAINER=${RB_RESTRICTED_IN_CONTAINER}
      - OFFSITE_BUILDINGS=${RB_OFFSITE_BUILDINGS}
      - RESOURCE_ID_SEPARATOR=${RB_RESOURCE_ID_SEPARATOR}
      - USE_LOCATION_TITLE=${RB_USE_LOCATION_TITLE}
      - PROD=${PROD}
      - AEON_CACHE_DURATION=${AEON_CACHE_DURATION}
      - db=${RB_DB}
    build: 
      context: ./request_broker
      dockerfile: Dockerfile.prod
      args:
        - REQUEST_BROKER_DNS=${RB_DNS}
        - APPLICATION_PORT=${RB_PORT:-8000}
        - DOCKER_BUILDKIT:0
    hostname: requestbroker.library.pitt.edu
    volumes:
      - ./request_broker:/code
    networks:
      - astraeus-interop
    ports:
      - "${RB_PORT:-8000}:${RB_PORT:-8000}"
    depends_on:
      - request-broker-db
    restart: "always"
  dimes-web:
    build: 
      context: ./dimes
      dockerfile: Dockerfile
      args:
        - REACT_APP_ARGO_BASEURL=${REACT_APP_ARGO_BASEURL}
        - REACT_APP_REQUEST_BROKER_BASEURL=${REACT_APP_REQUEST_BROKER_BASEURL}
        - REACT_APP_LOCALSTORAGE_KEY=${REACT_APP_LOCALSTORAGE_KEY}
        - REACT_APP_MINIMAP_KEY=${REACT_APP_MINIMAP_KEY}
        - REACT_APP_S3_BASEURL=${REACT_APP_S3_BASEURL}
        - REACT_APP_EMAIL=${REACT_APP_EMAIL}
        - REACT_APP_RECAPCHA_SITE_KEY=${REACT_APP_RECAPCHA_SITE_KEY}
        - REACT_APP_AEON_URL=${REACT_APP_AEON_URL}
    networks:
      - astraeus-interop
    ports:
      - 3000:80
    stdin_open: true
    depends_on:
      - argo-web
      - request-broker-web
    restart: "always"

  elasticsearch:
    image: elasticsearch:7.9.3
    environment:
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin=https://myreadingroom.library.pitt.edu http://myreadingroom.library.pitt.edu http://localhost:3000 https://requestbroker.library.pitt.edu http://requestbroker.library.pitt.edu http://localhost:8000 https://argo.library.pitt.edu http://argo.library.pitt.edu http://localhost:8001 http://localhost:3001 http:localhost:8008 http://localhost:8007
      - http.cors.allow-headers=Content-Type,Access-Control-Allow-Headers,Authorization,X-Requested-With
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - astraeus-interop
    ports:
      - 9200:9200
    restart: "always"

volumes:
  piscesdbvolume:
  scorpiodbvolume:
  elasticsearch:
  argodbvolume:
  requestbrokerdbvolume:

networks:
  astraeus-interop:
