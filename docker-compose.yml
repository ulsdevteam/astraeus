version: '3'
services:
  pisces-db:
    image: postgres:10.4
    volumes:
      - piscesdbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  pisces-web:
    build: 
      context: ./pisces
      dockerfile: Dockerfile.prod
    environment:
      - APPLICATION_PORT=8007
    volumes:
      - ./pisces:/code
    networks:
      - astraeus-interop
    ports:
      - "8007:8007"
    depends_on:
      - pisces-db
      - elasticsearch
  pisces-cron:
    build:
      context: ./pisces
      dockerfile: Dockerfile.cron
    volumes:
      - /data/logs/cron:/var/log/pisces-cron
    networks:
      - astraeus-interop
    depends_on:
      - pisces-web
  scorpio-db:
    image: postgres:10.4
    volumes:
      - scorpiodbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  scorpio-web:
    build: 
      context: ./scorpio
      dockerfile: Dockerfile.prod
    volumes:
      - ./scorpio:/code
    networks:
      - astraeus-interop
    ports:
      - "8008:8008"
    depends_on:
      - scorpio-db
      - elasticsearch
  scorpio-cron:
    build:
      context: ./scorpio
      dockerfile: Dockerfile.cron
    volumes:
      - /data/logs/cron:/var/log/scorpio-cron
    networks:
      - astraeus-interop
    depends_on:
      - scorpio-web
  argo-db:
    image: postgres:10.4
    volumes:
      - argodbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  argo-web:
    build: 
      context: ./argo
      dockerfile: Dockerfile.prod
    volumes:
      - ./argo:/code
    networks:
      - astraeus-interop
    ports:
      - "8001:8001"
    depends_on:
      - argo-db
      - elasticsearch
  request-broker-db:
    image: postgres:10.4
    volumes:
      - requestbrokerdbvolume:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  request-broker-web:
    build: 
      context: ./request_broker
      dockerfile: Dockerfile.prod
      args:
        - REQUEST_BROKER_DNS=${REQUEST_BROKER_DNS}
        - APPLICATION_PORT=${REQUEST_BROKER_PORT}
    volumes:
      - ./request_broker:/code
    networks:
      - astraeus-interop
    ports:
      - "8000:8000"
    depends_on:
      - request-broker-db
  dimes-web:
    build: 
      context: ./dimes
      dockerfile: Dockerfile.prod
    networks:
      - astraeus-interop
    ports:
      - 3000:80
    stdin_open: true
    depends_on:
      - argo-web
      - request-broker-web

  elasticsearch:
    image: elasticsearch:7.9.3
    environment:
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin=https://myreadingroom.library.pitt.edu http://myreadingroom.library.pitt.edu http://localhost:3000 https://requestbroker.library.pitt.edu http://requestbroker.library.pitt.edu http://localhost:8000 https://argo.library.pitt.edu http://argo.library.pitt.edu http://localhost:8001 http://localhost:3001 http:localhost:8008 http://localhost:8007
      - http.cors.allow-headers=Content-Type,Access-Control-Allow-Headers,Authorization,X-Requested-With
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - astraeus-interop
    ports:
      - 9200:9200

volumes:
  piscesdbvolume:
  scorpiodbvolume:
  elasticsearch:
  argodbvolume:
  requestbrokerdbvolume:

networks:
  astraeus-interop:
