version: '3'
services:

  pisces-db:
    image: postgres:10.4
    volumes:
      - piscesdbvol:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  pisces-web:
    build: 
      context: ./pisces
    env_file:
      - ./pisces/pisces/config.py
    environment:
      - APPLICATION_PORT=${PISCES_APP_PORT:-8007}
    entrypoint: /code/entrypoint.sh
    volumes:
      - ./pisces:/code
    networks:
      - astraeus-interop
    ports:
      - "${PISCES_APP_PORT:-8007}:${PISCES_APP_PORT:-8007}"
    depends_on:
      - pisces-db
  scorpio-db:
    image: postgres:10.4
    volumes:
      - scorpiodbvol:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  scorpio-web:
    build: 
      context: ./scorpio
    entrypoint: /code/entrypoint.sh
    volumes:
      - ./scorpio:/code
    networks:
      - astraeus-interop
    env_file:
      - ./scorpio/scorpio/config.py
    environment:
      - APPLICATION_PORT=${SCORPIO_APP_PORT:-8013}
    ports:
      - "${SCORPIO_APP_PORT:-8013}:${SCORPIO_APP_PORT:-8013}"
    depends_on:
      - scorpio-db
  argo-db:
    image: postgres:10.4
    volumes:
      - argodbvol:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
  argo-web:
    build: 
      context: ./argo
    entrypoint: /code/entrypoint.sh
    volumes:
      - ./argo:/code
    env_file:
      - ./argo/argo/config.py
    environment:
      - APPLICATION_PORT=${ARGO_APP_PORT:-8014}
    networks:
      - astraeus-interop
    ports:
      - "${ARGO_APP_PORT:-8014}:${ARGO_APP_PORT:-8014}"
    depends_on:
      - argo-db
  request-broker-db:
    image: postgres:10.4
    volumes:
      - requestbrokerdbvol:/var/lib/postgresql/data/
    networks:
      - astraeus-interop
    environment:
      - POSTGRES_USER=${BROKER_POSTGRESS_USER:-postgres}  # name of the application database user
      - POSTGRES_PASSWORD=${BROKER_POSTGRESS_PASSWORD:-postgres}  # name of the application database user
      - POSTGRES_DB=${BROKER_POSTGRESS_DB:-request_broker_dev}  # name of the application database
  request-broker-web:
    build: 
      context: ./request_broker
    volumes:
      - ./request_broker:/code
    networks:
      - astraeus-interop
    environment:
      - APPLICATION_PORT=${BROKER_PORT:-8000}
    ports:
      - "${BROKER_PORT:-8000}:${BROKER_PORT:-8000}"
    depends_on:
      - request-broker-db
  dimes-web:
    build: 
      context: ./dimes
    networks:
      - astraeus-interop
    env_file:
      - ./dimes/.env
    ports:
      - ${DIMES_PORT:-3000}:80
    stdin_open: true
  elasticsearch:
    image: elasticsearch:7.9.3
    environment:
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:8000
      - http.cors.allow-headers=Content-Type,Access-Control-Allow-Headers,Authorization,X-Requested-With
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearchvol:/usr/share/elasticsearch/data
    networks:
      - astraeus-interop
    ports:
      - ${ELASTIC_PORT:-9200}:${ELASTIC_PORT:-9200}

volumes:
  piscesdbvol:
  scorpiodbvol:
  elasticsearchvol:
  argodbvol:
  requestbrokerdbvol:

networks:
  astraeus-interop:
